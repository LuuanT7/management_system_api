generator client {
  provider = "prisma-client-js"
}

// Temporariamente desabilitado para o build do Docker
// generator erd {
 // provider  = "prisma-erd-generator"
 // output    = "erd.svg"
 // format    = "svg"
 // puppeteer = true


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tipos de usuários
enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUARDIAN
}

// Tipos de atividades pré-definidos
enum ActivityType {
  HOMEWORK // Tarefa de casa
  TEST // Prova escrita
  PROJECT // Trabalho prático
  PRESENTATION // Apresentação oral
  PARTICIPATION // Participação em aula
}

// Tipos de notificação
enum NotificationType {
  NEW_MATERIAL // Novo material didático disponível
  GRADE_POSTED // Nova nota lançada
  GRADE_REVIEW // Média/boletim atualizado
  ATTENDANCE // Presença registrada
  PAYMENT_DUE // Pagamento próximo do vencimento
  PAYMENT_RECEIVED // Pagamento confirmado
  SYSTEM_ALERT // Alerta do sistema
  CLASS_UPDATE // Atualização na turma
}

// Tipos de recursos relacionados
enum RelatedType {
  CLASS_MATERIAL // Material didático
  GRADE // Nota individual
  GRADE_REPORT // Boletim
  ATTENDANCE // Registro de presença
  PAYMENT // Pagamento
  CLASS // Turma
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String?
  cpf       String?   @unique
  rg        String?
  gender    String?
  birthDate DateTime?
  role      Role      @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Tokens       Token[] 
  Student      Student?
  Teacher      Teacher[]
  Guardian     Guardian[]
  Notifications Notification[]
  UserAddresses  UserAddress[]
}

model UserAddress {
  id           String   @id @default(uuid())
  userId       String
  address      String
  city         String
  state        String
  number       String
  zipCode      String
  complement   String?
  neighborhood String?
  User         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  type      String
  expires   DateTime
  userId    String

  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Guardian {
  id         String       @id @default(uuid())
  userId     String       
  User       User         @relation(fields: [userId], references: [id])
  Students   Student[]
  Payments   Payment[]
  Enrollment Enrollment[]
}

model Student {
  ra         Int        @id @default(autoincrement())
  userId      String        @unique
  guardianId  String
  User        User          @relation(fields: [userId], references: [id])
  Guardian    Guardian      @relation(fields: [guardianId], references: [id])
  Enrollments Enrollment[]
  Attendance  Attendance[]
  GradeReport GradeReport[]
}

model Teacher {
  id      String  @id @default(uuid())
  userId  String  
  User    User    @relation(fields: [userId], references: [id])
  Class Class[]
}

enum Shift {
  MORNING
  AFTERNOON
}

model Class {
  id            String          @id @default(uuid())
  name          String
  subject       String
  shift         Shift           @default(MORNING)
  teacherId     String
  teacher       Teacher         @relation(fields: [teacherId], references: [id])
  Enrollments   Enrollment[]
  Attendance    Attendance[]
  GradeReport   GradeReport[]
  Activity      Activity[]
  ClassMaterial ClassMaterial[]
}

// Modelo de Boletim Escolar
model GradeReport {
  id        String   @id @default(uuid()) // ID único gerado automaticamente
  classId   String // ID da turma/disciplina
  period    String // Período letivo (ex: "1º Bimestre")
  average   Float // Média geral do aluno no período
  status    String // Situação: Aprovado/Reprovado/Recuperação
  notes     String? // Observações complementares
  studentRA Int // RA do aluno (relacionamento)
  Student   Student  @relation(fields: [studentRA], references: [ra]) // Relação com Student
  Class     Class    @relation(fields: [classId], references: [id]) // Relação com Class
  Grade    Grade[] // Lista de notas individuais
  createdAt DateTime @default(now()) // Data de criação do registro
  updatedAt DateTime @updatedAt // Data da última atualização
}

// Modelo de Notas Individuais
model Grade {
  id            String      @id @default(uuid()) // ID único
  gradeReportId String // ID do boletim relacionado
  activityId    String // ID da atividade avaliada
  value         Float // Valor da nota (0-10)
  weight        Float       @default(1.0) // Peso na média final
  comments      String? // Comentários do professor
  GradeReport   GradeReport @relation(fields: [gradeReportId], references: [id]) // Relação com GradeReport
  Activity      Activity    @relation(fields: [activityId], references: [id]) // Relação com Activity
  createdAt     DateTime    @default(now()) // Data de criação
  updatedAt     DateTime    @updatedAt // Data de atualização
}

// Modelo de Atividades Avaliativas
model Activity {
  id          String       @id @default(uuid()) // ID único
  classId     String // ID da turma/disciplina
  title       String // Título da atividade
  description String? // Descrição detalhada
  type        ActivityType // Tipo: Tarefa/Prova/Projeto/etc.
  dueDate     DateTime // Data de entrega
  maxScore    Float        @default(10.0) // Valor máximo da atividade
  Class       Class        @relation(fields: [classId], references: [id]) // Relação com Class
  Grade      Grade[] // Notas atribuídas
  createdAt   DateTime     @default(now()) // Data de criação
  updatedAt   DateTime     @updatedAt // Data de atualização
}

// Modelo de Materiais Didáticos
model ClassMaterial {
  id          String   @id @default(uuid()) // ID único
  classId     String // ID da turma
  title       String // Título do material
  description String? // Descrição do conteúdo
  fileUrl     String? // URL do arquivo (PDF, PPT, etc.)
  isPublished Boolean  @default(false) // Se está disponível para alunos
  Class       Class    @relation(fields: [classId], references: [id]) // Relação com Class
  createdAt   DateTime @default(now()) // Data de criação
  updatedAt   DateTime @updatedAt // Data de atualização
}

model Notification {
  id          String           @id @default(uuid()) // ID único da notificação
  userId      String // ID do usuário destinatário
  type        NotificationType // Tipo de notificação
  title       String // Título resumido
  message     String // Mensagem detalhada
  relatedId   String? // ID do recurso relacionado (opcional)
  relatedType RelatedType? // Tipo do recurso relacionado
  isRead      Boolean          @default(false) // Se foi lida
  readAt      DateTime? // Data de leitura
  User        User             @relation(fields: [userId], references: [id]) // Relação com User
  createdAt   DateTime         @default(now()) // Data de criação
  updatedAt   DateTime         @updatedAt // Data de atualização

  @@index([userId]) // Índice para buscas por usuário
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

model Enrollment {
  id            String        @id @default(uuid())
  classId       String
  guardianId    String
  paymentStatus PaymentStatus @default(PENDING)
  enrolledAt    DateTime      @default(now())
  paymentId     String?
  active        Boolean       @default(true)
  studentRA Int // RA do aluno (relacionamento)
  Student   Student  @relation(fields: [studentRA], references: [ra]) // Relação com Student
  Guardian      Guardian      @relation(fields: [guardianId], references: [id])
  Class         Class         @relation(fields: [classId], references: [id])
  Payment       Payment?      @relation(fields: [paymentId], references: [id])
}

model Attendance {
  id        String   @id @default(uuid())
  classId   String
  date      DateTime
  present   Boolean
  studentRA Int // RA do aluno (relacionamento)
  Student   Student  @relation(fields: [studentRA], references: [ra]) // Relação com Student
  Class     Class    @relation(fields: [classId], references: [id])
}

model Payment {
  id         String       @id @default(uuid())
  guardianId String
  amount     Float
  dueDate    DateTime
  paid       Boolean      @default(false)
  paidAt     DateTime?
  Guardian   Guardian     @relation(fields: [guardianId], references: [id])
  Enrollment Enrollment[]
}


